The title does not do justice in providing an explination of this project.

We now have to update our web form everytime there is a click on three different buttons. 
These notes are for me and serve as a summary  for this:

//Freecodecamp
You can design a more complex stateful component by combining the concepts covered so far. 
These include initializing state, writing methods that set state, and assigning click handlers to trigger these methods.


The Counter component keeps track of a count value in state. There are two buttons which call methods increment() and decrement().
Write these methods so the counter value is incremented or decremented by 1 when the appropriate button is clicked. 
Also, create a reset() method so when the reset button is clicked, the count is set to 0.

Note: Make sure you don't modify the classNames of the buttons. Also, remember to add the necessary 
bindings for the newly-created methods in the constructor.

// Code solution 

// Create the Class name and notice it extends a react component
// This.state is the class property that we will be modifying throughout the form
// Which is why later on we bind our method names with the property this.

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
 
 //lets bind methods according to the onClick { this. 'name' }(method name) below
    
    this.increment = this.increment.bind(this);
    this.decrement= this.decrement.bind(this);
    this.reset = this.reset.bind(this);
    // change code above this line
  }
  
]
  // Here we code the method names 
  increment() {
    this.setState( {
      count: this.state.count + 1
    })
  }
// We call the method setState to chnage the class property count!
  decrement() {
    this.setState( {
      count: this.state.count - 1
    });
  }

// Pay attention to the wording and formatting of how we call a class property with {} ex 
// { classProperty: [value]}
  reset(){
    this.setState( {
      count: this.state.count = 0
    })
  }

  // change code above this line
  // Here each button on the (web) form does something according to the onClick action such as increment, dec, and reset
  render() {
    return (
      <div>
        <button className='inc' onClick={this.increment}>Increment!</button>
        <button className='dec' onClick={this.decrement}>Decrement!</button>
        <button className='reset' onClick={this.reset}>Reset</button>
        <h1>Current Count: {this.state.count}</h1>
      </div>
    ); // Close return method
  } //Close render method {}
};
